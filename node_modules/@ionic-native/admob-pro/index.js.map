{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/admob-pro/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport type AdSize = 'SMART_BANNER' | 'BANNER' | 'MEDIUM_RECTANGLE' | 'FULL_BANNER' | 'LEADERBOARD' | 'SKYSCRAPER' | 'CUSTOM';\r\n\r\nexport interface AdMobOptions {\r\n\r\n  /**\r\n   * Banner ad ID\r\n   */\r\n  adId?: string;\r\n\r\n  /**\r\n   * Banner Ad Size, defaults to `SMART_BANNER`. IT can be: `SMART_BANNER`, `BANNER`, `MEDIUM_RECTANGLE`, `FULL_BANNER`, `LEADERBOARD`, `SKYSCRAPER`, or `CUSTOM`\r\n   */\r\n  adSize?: AdSize;\r\n\r\n  /**\r\n   * Banner width, valid when `adSize` is set to `CUSTOM`\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * Banner height, valid when `adSize` is set to `CUSTOM`\r\n   */\r\n  height?: number;\r\n\r\n  /**\r\n   * Allow banner to overlap webview, or else it will push webview up or down to avoid overlap. Defaults to false.\r\n   */\r\n  overlap?: boolean;\r\n\r\n  /**\r\n   * Position of banner ad. Defaults to `TOP_CENTER`. You can use the `AdMobPro.AD_POSITION` property to select other values.\r\n   */\r\n  position?: number;\r\n\r\n  /**\r\n   * X in pixels. Valid when `position` is set to `POS_XY`\r\n   */\r\n  x?: number;\r\n\r\n  /**\r\n   * Y in pixels. Valid when `position` is set to `POS_XY`\r\n   */\r\n  y?: number;\r\n\r\n  /**\r\n   * Set to true to receive test ad for testing purposes\r\n   */\r\n  isTesting?: boolean;\r\n\r\n  /**\r\n   * Auto show interstitial ad when loaded. Set to false if hope to control the show timing with prepareInterstitial/showInterstitial\r\n   */\r\n  autoShow?: boolean;\r\n\r\n  /**\r\n   * Re-create the banner on web view orientation change (not screen orientation), or else just move the banner. Default:true.\r\n   */\r\n  orientationRenew?: boolean;\r\n\r\n  /**\r\n   * Set extra color style for Ad\r\n   */\r\n  adExtras?: AdExtras;\r\n\r\n  /**\r\n   * License key for the plugin\r\n   */\r\n  license?: any;\r\n\r\n}\r\n\r\nexport interface AdExtras {\r\n\r\n  color_bg: string;\r\n\r\n  color_bg_top: string;\r\n\r\n  color_border: string;\r\n\r\n  color_link: string;\r\n\r\n  color_text: string;\r\n\r\n  color_url: string;\r\n\r\n}\r\n\r\n/**\r\n * @paid\r\n * @name AdMob Pro\r\n * @description\r\n * Plugin for Google Ads, including AdMob / DFP (DoubleClick for publisher) and mediations to other Ad networks.\r\n *\r\n * IMPORTANT NOTICE: this plugin takes a percentage out of your earnings if you profit more than $1,000. Read more about this on the plugin's repo. For a completely free alternative, see [AdMobPro Free](../admob-free).\r\n * @usage\r\n * ```typescript\r\n * import { AdMobPro } from '@ionic-native/admob-pro';\r\n * import { Platform } from 'ionic-angular';\r\n *\r\n * constructor(private admob: AdMobPro, private platform: Platform ) { }\r\n *\r\n * ionViewDidLoad() {\r\n *   this.admob.onAdDismiss()\r\n *     .subscribe(() => { console.log('User dismissed ad'); });\r\n * }\r\n *\r\n * onClick() {\r\n *   let adId;\r\n *   if(this.platform.is('android')) {\r\n *     adId = 'YOUR_ADID_ANDROID';\r\n *   } else if (this.platform.is('ios')) {\r\n *     adId = 'YOUR_ADID_IOS';\r\n *   }\r\n *   this.admob.prepareInterstitial({adId: adId})\r\n *     .then(() => { this.admob.showInterstitial(); });\r\n * }\r\n *\r\n * ```\r\n *\r\n * @interfaces\r\n * AdMobOptions\r\n * AdExtras\r\n */\r\n@Plugin({\r\n  pluginName: 'AdMob Pro',\r\n  plugin: 'cordova-plugin-admobpro',\r\n  pluginRef: 'AdMob',\r\n  repo: 'https://github.com/floatinghotpot/cordova-admob-pro',\r\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\r\n})\r\n@Injectable()\r\nexport class AdMobPro extends IonicNativePlugin {\r\n\r\n  AD_POSITION: {\r\n    NO_CHANGE: number;\r\n    TOP_LEFT: number;\r\n    TOP_CENTER: number;\r\n    TOP_RIGHT: number;\r\n    LEFT: number;\r\n    CENTER: number;\r\n    RIGHT: number;\r\n    BOTTOM_LEFT: number;\r\n    BOTTOM_CENTER: number;\r\n    BOTTOM_RIGHT: number;\r\n    POS_XY: number;\r\n  } = {\r\n    NO_CHANGE: 0,\r\n    TOP_LEFT: 1,\r\n    TOP_CENTER: 2,\r\n    TOP_RIGHT: 3,\r\n    LEFT: 4,\r\n    CENTER: 5,\r\n    RIGHT: 6,\r\n    BOTTOM_LEFT: 7,\r\n    BOTTOM_CENTER: 8,\r\n    BOTTOM_RIGHT: 9,\r\n    POS_XY: 10\r\n  };\r\n\r\n  /**\r\n   * Create a banner\r\n   * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options\r\n   * @returns {Promise<any>} Returns a Promise that resolves when the banner is created\r\n   */\r\n  @Cordova()\r\n  createBanner(adIdOrOptions: string | AdMobOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Destroy the banner, remove it from screen.\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  removeBanner(): void { }\r\n\r\n  /**\r\n   * Show banner at position\r\n   * @param position {number} Position. Use `AdMobPro.AD_POSITION` to set values.\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  showBanner(position: number): void { }\r\n\r\n  /**\r\n   * Show banner at custom position\r\n   * @param x {number} Offset from screen left.\r\n   * @param y {number} Offset from screen top.\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  showBannerAtXY(x: number, y: number): void { }\r\n\r\n  /**\r\n   * Hide the banner, remove it from screen, but can show it later\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  hideBanner(): void { }\r\n\r\n  /**\r\n   * Prepare interstitial banner\r\n   * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options\r\n   * @returns {Promise<any>} Returns a Promise that resolves when interstitial is prepared\r\n   */\r\n  @Cordova()\r\n  prepareInterstitial(adIdOrOptions: string | AdMobOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show interstitial ad when it's ready\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  showInterstitial(): void { }\r\n\r\n  /**\r\n   * Prepare a reward video ad\r\n   * @param adIdOrOptions {string | AdMobOptions} Ad ID or Options\r\n   * @returns {Promise<any>} Returns a Promise that resolves when the ad is prepared\r\n   */\r\n  @Cordova()\r\n  prepareRewardVideoAd(adIdOrOptions: string | AdMobOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Show a reward video ad\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  showRewardVideoAd(): void { }\r\n\r\n  /**\r\n   * Sets the values for configuration and targeting\r\n   * @param options {AdMobOptions} Options\r\n   * @returns {Promise<any>} Returns a Promise that resolves when the options have been set\r\n   */\r\n  @Cordova()\r\n  setOptions(options: AdMobOptions): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get user ad settings\r\n   * @returns {Promise<any>} Returns a promise that resolves with the ad settings\r\n   */\r\n  @Cordova()\r\n  getAdSettings(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Triggered when failed to receive Ad\r\n   * @returns {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'onAdFailLoad',\r\n    element: document\r\n  })\r\n  onAdFailLoad(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Triggered when Ad received\r\n   * @returns {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'onAdLoaded',\r\n    element: document\r\n  })\r\n  onAdLoaded(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Triggered when Ad will be showed on screen\r\n   * @returns {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'onAdPresent',\r\n    element: document\r\n  })\r\n  onAdPresent(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Triggered when user click the Ad, and will jump out of your App\r\n   * @returns {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'onAdLeaveApp',\r\n    element: document\r\n  })\r\n  onAdLeaveApp(): Observable<any> { return; }\r\n\r\n  /**\r\n   * Triggered when dismiss the Ad and back to your App\r\n   * @returns {Observable<any>}\r\n   */\r\n  @Cordova({\r\n    eventObservable: true,\r\n    event: 'onAdDismiss',\r\n    element: document\r\n  })\r\n  onAdDismiss(): Observable<any> { return; }\r\n\r\n}\r\n"]}